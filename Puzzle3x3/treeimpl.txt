The tree of all permutations is the structure of states with four descendants
each. Each descendant represents move in one direction in the puzzle. For many
states only two moves are valid, for some all four. Invalid moves may be
replaced by the NULL pointer in the branch. Also, when the move is about to
repeat the state that is already generated in one of the previous branches, it
should also be considered illegal:


                               GoalState R0
                          ------------------------						
                          Left   Up   Down   Right
                           /     |     |       \
                          /     NULL   |       NULL
                         /             |
                 State1 LB0            |
           ------------------------    |		
           Left   Up   Down   Right    |
            /    NULL  DB1    NULL     |
           /                       State2 DB2									  
        State LB1           ------------------------						
                            Left   Up   Down   Right
                             /     |     |       \
                            /     NULL   |       NULL
                           /             |
                   State3 LB3            |						 
             ------------------------    |					
             Left   Up   Down   Right    |
                                         |
                                    State4 DB3									
                              ------------------------						
                              Left   Up   Down   Right

The approach to solve the puzzle is to generate all possible descendants of
the goal state in the form of tree. For 3x3 puzzle we have 9! permutations.
Each configuration has exactly 9!/2 solutions.

Data is represented in the linear tables couple:

Index:
0 1  2   3   4   5   6   7   ...
Tree:
X R0 LB0 DB2 LB1 DB1 LB3 DB3 ...  
Parent state index table:
X 0  1   1   2   2   3   3 ...

First row represents the index in the table. The second row represents the 
states of the puzzle. The index #0 is not used. The Parent state index table 
is used to create the sequence of the moves once the initial state is 
generated.

The tree array keeps the values of pointers to the PTree structure:

struct PuzzleTree
{
	Box anBox; // represents the state
	// descendants
	PuzzleTree *pUp;
	PuzzleTree *pDown;
	PuzzleTree *pRight;
	PuzzleTree *pLeft;
	// internal use
	long lID;
};

typedef struct PuzzleTree PTree;
typedef PTree *PTreePtr;

The InitialState R0 is the actual goal state. It is better to generate all
descendants of the goal state because it gives the image of entire tree of
legal states.
